@startuml
skinparam classAttributeIconSize 0

class Mazo {
    -cartasEnMazo: ArrayList<Carta>
    -cartasFueraDeMazo: ArrayList<Carta>
    +{static}Mazo(cartas: ArrayList<Carta>, mezclador: IMezclador)
    +repartir(cantidad: int): ArrayList<Carta>
    +mezclarCartas(): void
    +agregarCartaAlMazo(carta: Carta): void
}

class Ronda {
    -numeroRonda: int
    -puntajeObjetivo: int
    -puntajeActual: int
    +{static}Ronda(numeroRonda: int, descartes: Descarte, manos: Mano, puntajeObjetivo: int, tienda: Tienda)
    +jugarRonda(cartasAJugar: ArrayList<Carta>, jokers: ArrayList<Joker>, evaluadorMano: EvaluadorMano): void
    +permitirDescarte(): boolean
    +permitirJugar(): boolean
}


class EvaluadorMano {
    -tiposDeMano: List<ManoDePoker>
    +{static}EvaluadorMano()
    -aplicarValorCartas(mano: ArrayList<Carta>, puntuacion: PuntuacionTirada): void
    -aplicarJokers(jokers: ArrayList<Joker>, tipo: ManoDePoker, puntuacion: PuntuacionTirada, descarte: Descarte): void
    -calcularPuntuacionTotal(mano: ArrayList<Carta>, tipo: ManoDePoker, jokers: ArrayList<Joker>, descarte: Descarte): int
    +evaluar(mano: ArrayList<Carta>, jokers: ArrayList<Joker>, descarte: Descarte): int
}

class Balatro {
    +{static}Balatro(rondas: ArrayList<Ronda>, mazo: Mazo)
    +cartasEnMazo(): int
    +iniciarTurno(): void
    +repartirCartas(): void
    +cantidadCartasEnMano(): int
    +descartar(): void
    +seleccionarCarta(carta: Carta): void
    +deseleccionarCarta(carta: Carta): void
    +jugarMano(): void
    +siguienteRonda(): void
    +agregarCarta(carta: Carta): void
    +agregarJoker(carta: Carta): void
}

Balatro "1" --> "1" EvaluadorMano
Balatro "1" *-- "1" Mazo
Balatro "1" *-- "*" Ronda
@enduml